package definition

import (
	"fmt"
	"os"

	"github.com/spf13/cobra"
	_ "github.com/todennus/docs/swagger"
	"github.com/todennus/shared/scopedef"
	"github.com/todennus/x/scope"
)

var mainPath string
var scopeReadmePath string

var Command = &cobra.Command{
	Use:   "definition",
	Short: "Generate app definition. You should call this command before generating swagger docs.",
	Run: func(cmd *cobra.Command, args []string) {
		if mainPath != "" {
			f, err := os.OpenFile(mainPath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
			if err != nil {
				panic(err)
			}

			GeneralInfo(f)
		}

		if scopeReadmePath != "" {
			f, err := os.OpenFile(scopeReadmePath, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
			if err != nil {
				panic(err)
			}

			ScopeReadme(f)
		}
	},
}

func init() {
	Command.Flags().StringVarP(&mainPath, "main", "m", "", "the general info file")
	Command.Flags().StringVarP(&scopeReadmePath, "scope", "s", "", "the scope readme file")
}

func GeneralInfo(f *os.File) {
	writeLine(f, "// Package docs Code generated by cli. DO NOT EDIT")
	writeLine(f, "package docs")
	writeLine(f, "")
	writeLine(f, "import _ \"github.com/todennus/oauth2-service/adapter/rest\"")
	writeLine(f, "")
	writeLine(f, "// @title Todennus API Endpoints")
	writeLine(f, "// @version 1.0")
	writeLine(f, "// @description This is Todennus - An Open ID Connect and OAuth2 Provider")
	writeLine(f, "")
	writeLine(f, "// @securityDefinitions.oauth2.application OAuth2Application")
	writeLine(f, "// @tokenUrl /oauth2/token")
	for _, scope := range scopedef.OrderedScopes {
		writeLine(f, fmt.Sprintf("// @scope.%s %s", scope.Scope(), scope.Description()))
	}
}

func ScopeReadme(f *os.File) {
	writeLine(f, "# Scopes")
	writeLine(f, "")
	writeLine(f, "Note: Authorization Code Flow with PKCE only allows scopes marked as `readonly`.")
	writeLine(f, "")
	writeLine(f, "Note: App Scope is only available in Client Credentials Flow.")
	writeLine(f, "")
	writeLine(f, "Note: Admin Scope is unavailable in Resource Owner Password Flow.")
	writeLine(f, "")
	writeLine(f, "## Standard scope")
	writeLine(f, "")
	writeLine(f, "| Scope | Description |")
	writeLine(f, "|-------|-------------|")
	for _, scope := range scopedef.StandardScopes {
		writeLine(f, fmt.Sprintf("| `%s` | %s |", scope.Scope(), scope.Description()))
	}
	writeLine(f, "")
	writeLine(f, "## User scope")
	writeLine(f, "")
	writeLine(f, "| Scope | Description | Is Read-only|")
	writeLine(f, "|-------|-------------|-------------|")
	for _, s := range scopedef.UserScopes {
		writeLine(f, fmt.Sprintf("|`%s`|%s|`%t`|", s.Scope(), s.Description(), scopedef.IsAllReadonly(scope.NewScopes(s))))
	}
	writeLine(f, "")
	writeLine(f, "## App scope")
	writeLine(f, "")
	writeLine(f, "| Scope | Description | Is Read-only|")
	writeLine(f, "|-------|-------------|-------------|")
	for _, s := range scopedef.AppScopes {
		writeLine(f, fmt.Sprintf("|`%s`|%s|`%t`|", s.Scope(), s.Description(), scopedef.IsAllReadonly(scope.NewScopes(s))))
	}
	writeLine(f, "")
	writeLine(f, "## Admin scope")
	writeLine(f, "")
	writeLine(f, "| Scope | Description | Is Read-only|")
	writeLine(f, "|-------|-------------|-------------|")
	for _, s := range scopedef.AdminScopes {
		writeLine(f, fmt.Sprintf("|`%s`|%s|`%t`|", s.Scope(), s.Description(), scopedef.IsAllReadonly(scope.NewScopes(s))))
	}
}

func writeLine(f *os.File, s string) {
	n, err := f.Write([]byte(s + "\n"))
	if err != nil {
		panic(err)
	}

	if n != len(s)+1 {
		panic("wrote insufficient length")
	}
}
