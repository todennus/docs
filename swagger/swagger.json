{
    "swagger": "2.0",
    "info": {
        "description": "This is Todennus - An Open ID Connect and OAuth2 Provider",
        "title": "Todennus API Endpoints",
        "contact": {},
        "version": "1.0"
    },
    "paths": {
        "/auth/callback": {
            "post": {
                "description": "This endpoint is called by the IdP after it validated the user.\nIt notifies to the server about the authentication result (success or failure) and the information of user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Authentication Callback Endpoint",
                "parameters": [
                    {
                        "description": "Authentication result",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2AuthenticationCallbackRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully accept the result",
                        "schema": {
                            "$ref": "#/definitions/github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2AuthenticationCallbackResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/update": {
            "get": {
                "description": "The IdP redirects the user to this endpoint after it sends the authentication result to the server. \u003cbr\u003e\nThis endpoint updates the user session state to `authenticated`, `unauthenticated`, or `failed authentication`.",
                "tags": [
                    "OAuth2"
                ],
                "summary": "Authentication Update Endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication id",
                        "name": "authentication_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect back to oauth2 authorization endpoint"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    }
                }
            }
        },
        "/oauth2/authorize": {
            "get": {
                "description": "The authorization endpoint is used to interact with the resource owner and obtain an authorization grant.\nThis is the entry point for starting an OAuth2 flow, such as Authorization Code or Implicit.",
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Authorization Endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The type of response requested, typically 'code' or 'token'.",
                        "name": "response_type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The client ID of the application making the authorization request.",
                        "name": "client_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The URI to which the response will be sent after the authorization.",
                        "name": "redirect_uri",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The scope of the access request. It defines the level of access the application is requesting.",
                        "name": "scope",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "An opaque value used by the client to maintain state between the request and callback.",
                        "name": "state",
                        "in": "query"
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect to client application with authorization code or error"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    }
                }
            }
        },
        "/oauth2/consent": {
            "get": {
                "description": "This endpoint serves a consent page when the server needs the user consent for client.",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "Consent page",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization ID",
                        "name": "authorization_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Consent page rendered successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint updates the consent result of user then redirect back to the oauth2 authorization endpoint.",
                "tags": [
                    "OAuth2"
                ],
                "summary": "Update consent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization ID",
                        "name": "authorization_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The consent result (accepted or denied)",
                        "name": "consent",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The accepted scopes of user (usually less than the requested scope).",
                        "name": "scope",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "303": {
                        "description": "Redirect back to oauth2 authorization endpoint"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    }
                }
            }
        },
        "/oauth2/token": {
            "post": {
                "description": "The token endpoint is used to exchange an authorization code, client credentials, or refresh token for an access token and optionally a refresh token.\nThis is part of the OAuth2 flow to grant access tokens to clients.",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2"
                ],
                "summary": "OAuth2 Token Endpoint",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The OAuth2 grant type (authorization_code, client_credentials, refresh_token)",
                        "name": "grant_type",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The authorization code received from the authorize endpoint (required for authorization_code grant type)",
                        "name": "code",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The redirect URI used in the authorization request (required for authorization_code grant type)",
                        "name": "redirect_uri",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The client ID of the application",
                        "name": "client_id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The client secret of the application",
                        "name": "client_secret",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The refresh token (required for refresh_token grant type)",
                        "name": "refresh_token",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "The scope of the access request (optional, space-separated)",
                        "name": "scope",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully generated access token",
                        "schema": {
                            "$ref": "#/definitions/github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    }
                }
            }
        },
        "/oauth2_clients": {
            "post": {
                "security": [
                    {
                        "OAuth2Application": [
                            "todennus/create:client"
                        ]
                    },
                    {
                        "OAuth2Application": [
                            "todennus/admin:create:client"
                        ]
                    }
                ],
                "description": "Create an new OAuth2 Client. \u003cbr\u003e\nIf the `is_confidential` field is true, a secret is issued. Please carefully store this secret in a confidential place. This secret will never be retrieved by anyway. \u003cbr\u003e\nRequire `todennus/create:client` or `todennus/admin:create:client` scope.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2 Client"
                ],
                "summary": "Create oauth2 client",
                "parameters": [
                    {
                        "description": "Client Information",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OAuth2ClientCreateRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Create client successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccessResponse-dto_OAuth2ClientCreateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenErrorResponse"
                        }
                    }
                }
            }
        },
        "/oauth2_clients/{client_id}": {
            "get": {
                "description": "Get OAuth2 Client information by ClientID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth2 Client"
                ],
                "summary": "Get oauth2 client by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ClientID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get client successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccessResponse-github_com_todennus_oauth2-client-service_adapter_rest_dto_OAuth2ClientGetByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "security": [
                    {
                        "OAuth2Application": [
                            "todennus/admin:create:user"
                        ]
                    }
                ],
                "description": "Register a new user by providing username and password. \u003cbr\u003e\nRequire `todennus/admin:create:user` scope.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserRegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccessResponse-dto_UserRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Duplicated",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerDuplicatedErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/username/{username}": {
            "get": {
                "description": "Get an user information by user username. \u003cbr\u003e",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user by username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get user successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccessResponse-dto_UserGetByUsernameResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/validate": {
            "post": {
                "security": [
                    {
                        "OAuth2Application": [
                            "todennus/admin:validate:user"
                        ]
                    }
                ],
                "description": "Validate the user credentials and returns the user information. \u003cbr\u003e\nRequire `todennus/admin:validate:user` scope.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Validate user credentials",
                "parameters": [
                    {
                        "description": "Validation data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_todennus_user-service_adapter_rest_dto.UserValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Validate successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccessResponse-github_com_todennus_user-service_adapter_rest_dto_UserValidateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "description": "Get an user information by user id.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get user by id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get user successfully",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerSuccessResponse-github_com_todennus_user-service_adapter_rest_dto_UserGetByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerBadRequestErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.OAuth2ClientCreateRequest": {
            "type": "object",
            "properties": {
                "is_admin": {
                    "type": "boolean",
                    "example": false
                },
                "is_confidential": {
                    "type": "boolean",
                    "example": true
                },
                "name": {
                    "type": "string",
                    "example": "Example Client"
                }
            }
        },
        "dto.OAuth2ClientCreateResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "332974701238012989"
                },
                "client_secret": {
                    "type": "string",
                    "example": "ElBacv..."
                },
                "is_admin": {
                    "type": "boolean",
                    "example": false
                },
                "is_confidential": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Example Client"
                },
                "owner_id": {
                    "type": "string",
                    "example": "330559330522759168"
                }
            }
        },
        "dto.UserGetByUsernameResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string",
                    "example": "Huy Le Ngoc"
                },
                "id": {
                    "type": "string",
                    "example": "330559330522759168"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "username": {
                    "type": "string",
                    "example": "huykingsofm"
                }
            }
        },
        "dto.UserRegisterRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "s3Cr3tP@ssW0rD"
                },
                "username": {
                    "type": "string",
                    "example": "huykingsofm"
                }
            }
        },
        "dto.UserRegisterResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string",
                    "example": "Huy Le Ngoc"
                },
                "id": {
                    "type": "string",
                    "example": "330559330522759168"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "username": {
                    "type": "string",
                    "example": "huykingsofm"
                }
            }
        },
        "github_com_todennus_oauth2-client-service_adapter_rest_dto.OAuth2ClientGetByIDResponse": {
            "type": "object",
            "properties": {
                "client_id": {
                    "type": "string",
                    "example": "332974701238012989"
                },
                "is_admin": {
                    "type": "boolean",
                    "example": false
                },
                "is_confidential": {
                    "type": "boolean",
                    "example": false
                },
                "name": {
                    "type": "string",
                    "example": "Example Client"
                },
                "owner_id": {
                    "type": "string",
                    "example": "330559330522759168"
                }
            }
        },
        "github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2AuthenticationCallbackRequest": {
            "type": "object",
            "properties": {
                "authorization_id": {
                    "type": "string",
                    "example": "djG4l..."
                },
                "error": {
                    "type": "string",
                    "example": ""
                },
                "idp_secret": {
                    "type": "string",
                    "example": "Sde3kl..."
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "user_id": {
                    "type": "string",
                    "example": "329780019283901"
                },
                "username": {
                    "type": "string",
                    "example": "huykingsofm"
                }
            }
        },
        "github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2AuthenticationCallbackResponse": {
            "type": "object",
            "properties": {
                "authentication_id": {
                    "type": "string",
                    "example": "hlqWe..."
                }
            }
        },
        "github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "refresh_token": {
                    "type": "string"
                },
                "scope": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "github_com_todennus_user-service_adapter_rest_dto.UserGetByIDResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string",
                    "example": "Huy Le Ngoc"
                },
                "id": {
                    "type": "string",
                    "example": "330559330522759168"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "username": {
                    "type": "string",
                    "example": "huykingsofm"
                }
            }
        },
        "github_com_todennus_user-service_adapter_rest_dto.UserValidateRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "s3Cr3tP@ssW0rD"
                },
                "username": {
                    "type": "string",
                    "example": "huykingsofm"
                }
            }
        },
        "github_com_todennus_user-service_adapter_rest_dto.UserValidateResponse": {
            "type": "object",
            "properties": {
                "display_name": {
                    "type": "string",
                    "example": "Huy Le Ngoc"
                },
                "id": {
                    "type": "string",
                    "example": "330559330522759168"
                },
                "role": {
                    "type": "string",
                    "example": "admin"
                },
                "username": {
                    "type": "string",
                    "example": "huykingsofm"
                }
            }
        },
        "response.SwaggerBadRequestErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "invalid_request"
                },
                "error_description": {
                    "type": "string",
                    "example": "invalid field: require string but got int"
                },
                "metadata": {
                    "$ref": "#/definitions/response.SwaggerMetadata"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "response.SwaggerDuplicatedErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "duplicated"
                },
                "error_description": {
                    "type": "string",
                    "example": "something has already existed"
                },
                "metadata": {
                    "$ref": "#/definitions/response.SwaggerMetadata"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "response.SwaggerForbiddenErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "forbidden"
                },
                "error_description": {
                    "type": "string",
                    "example": "not enough permission to access"
                },
                "metadata": {
                    "$ref": "#/definitions/response.SwaggerMetadata"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "response.SwaggerMetadata": {
            "type": "object",
            "properties": {
                "request_id": {
                    "type": "string",
                    "example": "IIJORWQpIvDMzzNf"
                },
                "timestamp": {
                    "type": "string",
                    "example": "2024-10-23T13:52:29.459752901+07:00"
                }
            }
        },
        "response.SwaggerNotFoundErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "not_found"
                },
                "error_description": {
                    "type": "string",
                    "example": "not found user with id 323979471029873"
                },
                "metadata": {
                    "$ref": "#/definitions/response.SwaggerMetadata"
                },
                "status": {
                    "type": "string",
                    "example": "error"
                }
            }
        },
        "response.SwaggerSuccessResponse-dto_OAuth2ClientCreateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.OAuth2ClientCreateResponse"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "response.SwaggerSuccessResponse-dto_UserGetByUsernameResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserGetByUsernameResponse"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "response.SwaggerSuccessResponse-dto_UserRegisterResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dto.UserRegisterResponse"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "response.SwaggerSuccessResponse-github_com_todennus_oauth2-client-service_adapter_rest_dto_OAuth2ClientGetByIDResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/github_com_todennus_oauth2-client-service_adapter_rest_dto.OAuth2ClientGetByIDResponse"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "response.SwaggerSuccessResponse-github_com_todennus_user-service_adapter_rest_dto_UserGetByIDResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/github_com_todennus_user-service_adapter_rest_dto.UserGetByIDResponse"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "response.SwaggerSuccessResponse-github_com_todennus_user-service_adapter_rest_dto_UserValidateResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/github_com_todennus_user-service_adapter_rest_dto.UserValidateResponse"
                },
                "status": {
                    "type": "string",
                    "example": "success"
                }
            }
        }
    },
    "securityDefinitions": {
        "OAuth2Application": {
            "type": "oauth2",
            "flow": "application",
            "tokenUrl": "/oauth2/token",
            "scopes": {
                "offline_access": "Maintain access to resource even if user is not present",
                "todennus/admin:create:client": "Grant admin permission to create a client",
                "todennus/admin:create:user": "Grant admin permission to create a new user",
                "todennus/admin:read:client.profile": "Grant admin read-only access to client profile",
                "todennus/admin:read:user.profile": "Grant admin read-only access to user profile",
                "todennus/admin:validate:client": "Grant admin permission to validate client",
                "todennus/admin:validate:user": "Grant admin permission to validate user credentials",
                "todennus/app:read:client.owner": "Grant read-only access to client owner id",
                "todennus/app:read:client.profile": "Grant read-only access to client profile",
                "todennus/create:client": "Grant permission to create a client",
                "todennus/read:client.profile": "Grant read-only access to client profile",
                "todennus/read:user.profile": "Grant read-only access to user profile"
            }
        }
    }
}