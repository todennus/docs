definitions:
  dto.AvatarGetPolicyTokenResponse:
    properties:
      policy_token:
        type: string
    type: object
  dto.AvatarUpdateRequest:
    properties:
      temporary_file_token:
        type: string
    type: object
  dto.AvatarUpdateResponse:
    properties:
      avatar_url:
        type: string
    type: object
  dto.OAuth2ClientCreateRequest:
    properties:
      is_admin:
        example: false
        type: boolean
      is_confidential:
        example: true
        type: boolean
      name:
        example: Example Client
        type: string
    type: object
  dto.OAuth2ClientCreateResponse:
    properties:
      client_id:
        example: "332974701238012989"
        type: string
      client_secret:
        example: ElBacv...
        type: string
      is_admin:
        example: false
        type: boolean
      is_confidential:
        example: false
        type: boolean
      name:
        example: Example Client
        type: string
      owner_id:
        example: "330559330522759168"
        type: string
    type: object
  dto.UploadResponse:
    properties:
      temporary_file_token:
        type: string
    type: object
  dto.UserGetByUsernameResponse:
    properties:
      display_name:
        example: Huy Le Ngoc
        type: string
      id:
        example: "330559330522759168"
        type: string
      role:
        example: admin
        type: string
      username:
        example: huykingsofm
        type: string
    type: object
  dto.UserRegisterRequest:
    properties:
      password:
        example: s3Cr3tP@ssW0rD
        type: string
      username:
        example: huykingsofm
        type: string
    type: object
  dto.UserRegisterResponse:
    properties:
      display_name:
        example: Huy Le Ngoc
        type: string
      id:
        example: "330559330522759168"
        type: string
      role:
        example: admin
        type: string
      username:
        example: huykingsofm
        type: string
    type: object
  dto.ValidatePolicyRequest:
    properties:
      policy_token:
        type: string
      size:
        type: integer
      type:
        type: string
    type: object
  dto.ValidatePolicyResponse:
    properties:
      upload_token:
        type: string
    type: object
  github_com_todennus_oauth2-client-service_adapter_rest_dto.OAuth2ClientGetByIDResponse:
    properties:
      client_id:
        example: "332974701238012989"
        type: string
      is_admin:
        example: false
        type: boolean
      is_confidential:
        example: false
        type: boolean
      name:
        example: Example Client
        type: string
      owner_id:
        example: "330559330522759168"
        type: string
    type: object
  github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2AuthenticationCallbackRequest:
    properties:
      authorization_id:
        example: djG4l...
        type: string
      error:
        example: ""
        type: string
      idp_secret:
        example: Sde3kl...
        type: string
      success:
        example: true
        type: boolean
      user_id:
        example: "329780019283901"
        type: string
      username:
        example: huykingsofm
        type: string
    type: object
  github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2AuthenticationCallbackResponse:
    properties:
      authentication_id:
        example: hlqWe...
        type: string
    type: object
  github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      scope:
        type: string
      token_type:
        type: string
    type: object
  github_com_todennus_user-service_adapter_rest_dto.UserGetByIDResponse:
    properties:
      display_name:
        example: Huy Le Ngoc
        type: string
      id:
        example: "330559330522759168"
        type: string
      role:
        example: admin
        type: string
      username:
        example: huykingsofm
        type: string
    type: object
  github_com_todennus_user-service_adapter_rest_dto.UserValidateRequest:
    properties:
      password:
        example: s3Cr3tP@ssW0rD
        type: string
      username:
        example: huykingsofm
        type: string
    type: object
  github_com_todennus_user-service_adapter_rest_dto.UserValidateResponse:
    properties:
      display_name:
        example: Huy Le Ngoc
        type: string
      id:
        example: "330559330522759168"
        type: string
      role:
        example: admin
        type: string
      username:
        example: huykingsofm
        type: string
    type: object
  response.SwaggerBadRequestErrorResponse:
    properties:
      error:
        example: invalid_request
        type: string
      error_description:
        example: 'invalid field: require string but got int'
        type: string
      metadata:
        $ref: '#/definitions/response.SwaggerMetadata'
      status:
        example: error
        type: string
    type: object
  response.SwaggerDuplicatedErrorResponse:
    properties:
      error:
        example: duplicated
        type: string
      error_description:
        example: something has already existed
        type: string
      metadata:
        $ref: '#/definitions/response.SwaggerMetadata'
      status:
        example: error
        type: string
    type: object
  response.SwaggerForbiddenErrorResponse:
    properties:
      error:
        example: forbidden
        type: string
      error_description:
        example: not enough permission to access
        type: string
      metadata:
        $ref: '#/definitions/response.SwaggerMetadata'
      status:
        example: error
        type: string
    type: object
  response.SwaggerMetadata:
    properties:
      request_id:
        example: IIJORWQpIvDMzzNf
        type: string
      timestamp:
        example: "2024-10-23T13:52:29.459752901+07:00"
        type: string
    type: object
  response.SwaggerNotFoundErrorResponse:
    properties:
      error:
        example: not_found
        type: string
      error_description:
        example: not found user with id 323979471029873
        type: string
      metadata:
        $ref: '#/definitions/response.SwaggerMetadata'
      status:
        example: error
        type: string
    type: object
  response.SwaggerSuccessResponse-dto_AvatarGetPolicyTokenResponse:
    properties:
      data:
        $ref: '#/definitions/dto.AvatarGetPolicyTokenResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-dto_AvatarUpdateResponse:
    properties:
      data:
        $ref: '#/definitions/dto.AvatarUpdateResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-dto_OAuth2ClientCreateResponse:
    properties:
      data:
        $ref: '#/definitions/dto.OAuth2ClientCreateResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-dto_UploadResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UploadResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-dto_UserGetByUsernameResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserGetByUsernameResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-dto_UserRegisterResponse:
    properties:
      data:
        $ref: '#/definitions/dto.UserRegisterResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-dto_ValidatePolicyResponse:
    properties:
      data:
        $ref: '#/definitions/dto.ValidatePolicyResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-github_com_todennus_oauth2-client-service_adapter_rest_dto_OAuth2ClientGetByIDResponse:
    properties:
      data:
        $ref: '#/definitions/github_com_todennus_oauth2-client-service_adapter_rest_dto.OAuth2ClientGetByIDResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-github_com_todennus_user-service_adapter_rest_dto_UserGetByIDResponse:
    properties:
      data:
        $ref: '#/definitions/github_com_todennus_user-service_adapter_rest_dto.UserGetByIDResponse'
      status:
        example: success
        type: string
    type: object
  response.SwaggerSuccessResponse-github_com_todennus_user-service_adapter_rest_dto_UserValidateResponse:
    properties:
      data:
        $ref: '#/definitions/github_com_todennus_user-service_adapter_rest_dto.UserValidateResponse'
      status:
        example: success
        type: string
    type: object
info:
  contact: {}
  description: This is Todennus - An Open ID Connect and OAuth2 Provider
  title: Todennus API Endpoints
  version: "1.0"
paths:
  /auth/callback:
    post:
      consumes:
      - application/json
      description: |-
        This endpoint is called by the IdP after it validated the user.
        It notifies to the server about the authentication result (success or failure) and the information of user.
      parameters:
      - description: Authentication result
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2AuthenticationCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully accept the result
          schema:
            $ref: '#/definitions/github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2AuthenticationCallbackResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.SwaggerForbiddenErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/response.SwaggerNotFoundErrorResponse'
      summary: Authentication Callback Endpoint
      tags:
      - OAuth2
  /auth/update:
    get:
      description: |-
        The IdP redirects the user to this endpoint after it sends the authentication result to the server. <br>
        This endpoint updates the user session state to `authenticated`, `unauthenticated`, or `failed authentication`.
      parameters:
      - description: Authentication id
        in: query
        name: authentication_id
        required: true
        type: string
      responses:
        "303":
          description: Redirect back to oauth2 authorization endpoint
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
      summary: Authentication Update Endpoint
      tags:
      - OAuth2
  /files/policy/validate:
    post:
      consumes:
      - application/json
      description: Use a `policy_token` to validate the file metadata against the
        policy. If the validation is success, get an `upload_token` to upload the
        file later.
      parameters:
      - description: Validate policy request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ValidatePolicyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully validate the file metadata
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-dto_ValidatePolicyResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.SwaggerForbiddenErrorResponse'
      summary: Validate file metadata.
      tags:
      - File
  /files/upload:
    post:
      consumes:
      - multipart/form-data
      description: Use an `upload_token` to upload the file. This file will be stored
        in temporary storage. Return a `temporary_file_token`.
      parameters:
      - description: upload token
        in: formData
        name: upload_token
        required: true
        type: string
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Upload successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-dto_UploadResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.SwaggerForbiddenErrorResponse'
      summary: Upload file.
      tags:
      - File
  /oauth2/authorize:
    get:
      description: |-
        The authorization endpoint is used to interact with the resource owner and obtain an authorization grant.
        This is the entry point for starting an OAuth2 flow, such as Authorization Code or Implicit.
      parameters:
      - description: The type of response requested, typically 'code' or 'token'.
        in: query
        name: response_type
        required: true
        type: string
      - description: The client ID of the application making the authorization request.
        in: query
        name: client_id
        required: true
        type: string
      - description: The URI to which the response will be sent after the authorization.
        in: query
        name: redirect_uri
        required: true
        type: string
      - description: The scope of the access request. It defines the level of access
          the application is requesting.
        in: query
        name: scope
        type: string
      - description: An opaque value used by the client to maintain state between
          the request and callback.
        in: query
        name: state
        type: string
      responses:
        "303":
          description: Redirect to client application with authorization code or error
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
      summary: OAuth2 Authorization Endpoint
      tags:
      - OAuth2
  /oauth2/consent:
    get:
      description: This endpoint serves a consent page when the server needs the user
        consent for client.
      parameters:
      - description: Authorization ID
        in: query
        name: authorization_id
        required: true
        type: string
      produces:
      - text/html
      responses:
        "200":
          description: Consent page rendered successfully
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
      summary: Consent page
      tags:
      - OAuth2
    post:
      description: This endpoint updates the consent result of user then redirect
        back to the oauth2 authorization endpoint.
      parameters:
      - description: Authorization ID
        in: query
        name: authorization_id
        required: true
        type: string
      - description: The consent result (accepted or denied)
        in: formData
        name: consent
        type: string
      - description: The accepted scopes of user (usually less than the requested
          scope).
        in: formData
        name: scope
        type: string
      responses:
        "303":
          description: Redirect back to oauth2 authorization endpoint
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
      summary: Update consent
      tags:
      - OAuth2
  /oauth2/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: |-
        The token endpoint is used to exchange an authorization code, client credentials, or refresh token for an access token and optionally a refresh token.
        This is part of the OAuth2 flow to grant access tokens to clients.
      parameters:
      - description: The OAuth2 grant type (authorization_code, client_credentials,
          refresh_token)
        in: formData
        name: grant_type
        required: true
        type: string
      - description: The authorization code received from the authorize endpoint (required
          for authorization_code grant type)
        in: formData
        name: code
        type: string
      - description: The redirect URI used in the authorization request (required
          for authorization_code grant type)
        in: formData
        name: redirect_uri
        type: string
      - description: The client ID of the application
        in: formData
        name: client_id
        required: true
        type: string
      - description: The client secret of the application
        in: formData
        name: client_secret
        required: true
        type: string
      - description: The refresh token (required for refresh_token grant type)
        in: formData
        name: refresh_token
        type: string
      - description: The scope of the access request (optional, space-separated)
        in: formData
        name: scope
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully generated access token
          schema:
            $ref: '#/definitions/github_com_todennus_oauth2-service_adapter_rest_dto.OAuth2TokenResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
      summary: OAuth2 Token Endpoint
      tags:
      - OAuth2
  /oauth2_clients:
    post:
      consumes:
      - application/json
      description: |-
        Create an new OAuth2 Client. <br>
        If the `is_confidential` field is true, a secret is issued. Please carefully store this secret in a confidential place. This secret will never be retrieved by anyway. <br>
        Require `todennus/create:client` or `todennus/admin:create:client` scope.
      parameters:
      - description: Client Information
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.OAuth2ClientCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Create client successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-dto_OAuth2ClientCreateResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.SwaggerForbiddenErrorResponse'
      security:
      - OAuth2Application:
        - todennus/create:client
      - OAuth2Application:
        - todennus/admin:create:client
      summary: Create oauth2 client
      tags:
      - OAuth2 Client
  /oauth2_clients/{client_id}:
    get:
      description: Get OAuth2 Client information by ClientID.
      parameters:
      - description: ClientID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get client successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-github_com_todennus_oauth2-client-service_adapter_rest_dto_OAuth2ClientGetByIDResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/response.SwaggerNotFoundErrorResponse'
      summary: Get oauth2 client by id
      tags:
      - OAuth2 Client
  /users:
    post:
      consumes:
      - application/json
      description: |-
        Register a new user by providing username and password. <br>
        Require `todennus/admin:create:user` scope.
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-dto_UserRegisterResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.SwaggerForbiddenErrorResponse'
        "409":
          description: Duplicated
          schema:
            $ref: '#/definitions/response.SwaggerDuplicatedErrorResponse'
      security:
      - OAuth2Application:
        - todennus/admin:create:user
      summary: Register a new user
      tags:
      - User
  /users/{user_id}:
    get:
      description: Get an user information by user id.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get user successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-github_com_todennus_user-service_adapter_rest_dto_UserGetByIDResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/response.SwaggerNotFoundErrorResponse'
      summary: Get user by id
      tags:
      - User
  /users/avatar:
    post:
      consumes:
      - application/json
      description: |-
        Use a temporary_file_token to update user avatar. <br>
        Require `todennus/update:user.avatar` scope.
      parameters:
      - description: avatar update request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AvatarUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Validate successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-dto_AvatarUpdateResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.SwaggerForbiddenErrorResponse'
      security:
      - OAuth2Application:
        - todennus/update:user.avatar
      summary: Updating avatar.
      tags:
      - User
  /users/avatar/policy_token:
    get:
      description: |-
        Get the updating avatar policy_token used for validating the avatar image metadata. Please refer POST /files/policy/validate for the next step. <br>
        Require `todennus/update:user.avatar` scope.
      produces:
      - application/json
      responses:
        "200":
          description: Get token successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-dto_AvatarGetPolicyTokenResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.SwaggerForbiddenErrorResponse'
      security:
      - OAuth2Application:
        - todennus/update:user.avatar
      summary: Get the updating avatar policy_token.
      tags:
      - User
  /users/username/{username}:
    get:
      description: Get an user information by user username. <br>
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get user successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-dto_UserGetByUsernameResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/response.SwaggerNotFoundErrorResponse'
      summary: Get user by username
      tags:
      - User
  /users/validate:
    post:
      consumes:
      - application/json
      description: |-
        Validate the user credentials and returns the user information. <br>
        Require `todennus/admin:validate:user` scope.
      parameters:
      - description: Validation data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/github_com_todennus_user-service_adapter_rest_dto.UserValidateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Validate successfully
          schema:
            $ref: '#/definitions/response.SwaggerSuccessResponse-github_com_todennus_user-service_adapter_rest_dto_UserValidateResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/response.SwaggerBadRequestErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.SwaggerForbiddenErrorResponse'
      security:
      - OAuth2Application:
        - todennus/admin:validate:user
      summary: Validate user credentials
      tags:
      - User
securityDefinitions:
  OAuth2Application:
    flow: application
    scopes:
      offline_access: Maintain access to the resource even if the user is not present
      todennus/admin:command:file.temporary: Grant permission to give a command to
        a temporary file
      todennus/admin:create:client: Grant permission to create new clients
      todennus/admin:create:user: Grant permission to create new users
      todennus/admin:read:client.profile: Grant read-only access to all client profiles
      todennus/admin:read:user.profile: Grant read-only access to all users' profiles
      todennus/admin:validate:client: Grant permission to validate the client's credentials
      todennus/admin:validate:file.policy: Grant permission to read the file policy
        from policy source
      todennus/admin:validate:user: Grant permission to validate all users' credentials
      todennus/app:read:client.owner: Grant read-only access to the client's owner
        id
      todennus/app:read:client.profile: Grant read-only access to the client's profile
      todennus/create:client: Grant permission to create new clients
      todennus/read:client.profile: Grant read-only access to the client's profile
      todennus/read:user.avatar: Grant read-only access to the user's avatar
      todennus/read:user.profile: Grant read-only access to the user's profile
      todennus/update:user.avatar: Grant permission to update the user's avatar
    tokenUrl: /oauth2/token
    type: oauth2
swagger: "2.0"
